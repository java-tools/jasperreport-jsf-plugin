~~ 
~~ JasperReports JSF Plugin
~~ Copyright (C) 2008 A. Alonso Dominguez
~~
~~ This library is free software; you can redistribute it and/or
~~ modify it under the terms of the GNU Lesser General Public
~~ License as published by the Free Software Foundation; either
~~ version 2.1 of the License, or (at your option) any later version.
~~ 
~~ This library is distributed in the hope that it will be useful,
~~ but WITHOUT ANY WARRANTY; without even the implied warranty of
~~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
~~ Lesser General Public License for more details.
~~ 
~~ You should have received a copy of the GNU Lesser General Public
~~ License along with this library; if not, write to the Free Software
~~ Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
~~ 
~~ A. Alonso Dominguez
~~ alonsoft@users.sf.net
~~ 

            ---
			Extending Output Formats
			---
			A. Alonso Dominguez

Extending Output Formats

  Many output formats are currently supported by the actual version of
JasperReports JSF-Plugin, but you can provide your owns extending the 
{{{apidocs\net\sf\jasperreports\jsf\export\Exporter.html}<<<Exporter>>>}} API.

  Another way of offering new <<<Exporter>>>s to the plugin is extending 
the {{{apidocs\net\sf\jasperreports\jsf\export\AbstractExporter.html}<<<AbstractExporter>>>}}
class. The difference between the two resides in that using the first one
you can write your own means of exporting the data, while using the last one
will require implementing also a <<<JRExporter>>>.

* Offering the new exporter to the plugin

  Once you have implemented your own <<<Exporter>>> you will need to provide
it as a service which will be loaded from the classpath. The way this is done
is using the file <<<META-INF/services/net.sf.jasperreports.jsf.export.Exporter>>>
which must be also in the classpath.

  The information of that file is similar than the specified at 
{{{http://java.sun.com/j2se/1.3/docs/guide/jar/jar.html#Service%20Provider}Service Provider}}
but not exactly, there is a bit difference that must be considered. That difference
consists in each line of the file must be a pair where the first part is the
supported format and the last one is the <<<Exporter>>> implementation class name.
Here is a code snippet which is exactly the one provided by default in this plugin:

+---
csv:net.sf.jasperreports.jsf.exporter.providers.CsvExporter
html:net.sf.jasperreports.jsf.exporter.providers.HtmlExporter
pdf:net.sf.jasperreports.jsf.exporter.providers.PdfExporter
rtf:net.sf.jasperreports.jsf.exporter.providers.RtfExporter
text:net.sf.jasperreports.jsf.exporter.providers.TextExporter
xls:net.sf.jasperreports.jsf.exporter.providers.XlsExporter
xml:net.sf.jasperreports.jsf.exporter.providers.XmlExporter
+---

  You can also replace one of the provided <<<Exporter>>>s by one written by yourself.
However, this is not recommended so do it by your own risk.